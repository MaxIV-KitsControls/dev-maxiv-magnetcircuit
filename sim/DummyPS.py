#!/usr/bin/env python
# -*- coding:utf-8 -*- 


##############################################################################
## license :
##============================================================================
##
## File :        DummyIonPump.py
## 
## Project :     Dummy Ion Pump
##
## This file is part of Tango device class.
## 
## Tango is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
## 
## Tango is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
## 
## You should have received a copy of the GNU General Public License
## along with Tango.  If not, see <http://www.gnu.org/licenses/>.
## 
##
## $Author :      paul.bell$
##
## $Revision :    $
##
## $Date :        $
##
## $HeadUrl :     $
##============================================================================
##            This file is generated by POGO
##    (Program Obviously used to Generate tango Object)
##
##        (c) - Software Engineering Group - ESRF
##############################################################################

"""
simulates the pressure behaviour according to predetermined ramp"""

__all__ = ["DummyPS", "DummyPSClass", "main"]

__docformat__ = 'restructuredtext'

import PyTango
import sys
# Add additional import
#----- PROTECTED REGION ID(DummyIonPump.additionnal_import) ENABLED START -----#
from dummypslib import DummyPSLib
#----- PROTECTED REGION END -----#	//	DummyIonPump.additionnal_import

## Device States Description
## No states for this device

class DummyPS (PyTango.Device_4Impl):

    #--------- Add you global variables here --------------------------
    #----- PROTECTED REGION ID(DummyIonPump.global_variables) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	DummyIonPump.global_variables

    def __init__(self,cl, name):
        PyTango.Device_4Impl.__init__(self,cl,name)
        self.debug_stream("In __init__()")
        DummyPS.init_device(self)
        #----- PROTECTED REGION ID(DummyIonPump.__init__) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	DummyIonPump.__init__
        self.set_state(PyTango.DevState.ON)

        
    def delete_device(self):
        self.debug_stream("In delete_device()")
        #----- PROTECTED REGION ID(DummyIonPump.delete_device) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	DummyIonPump.delete_device

    def init_device(self):
        self.debug_stream("In init_device()")
        self.get_device_properties(self.get_device_class())
        self.attr_Current_read = 0.0
        self.attr_Voltage_read = 0.0
        
        self.Mode = ""
        self.ilock1 = False
        self.ilock2 = False
        self.anarray = [1,2,3,4,5,6,7,8,9,0]
        self.trigger = 0

        #----- PROTECTED REGION ID(DummyIonPump.init_device) ENABLED START -----#
        self.dummy = DummyPSLib()
        #----- PROTECTED REGION END -----#	//	DummyIonPump.init_device
        self.enable = 0.0

        self.set_change_event('Trigger', True, False)


    def always_executed_hook(self):

        print "+++++++++++++++ IN AEH OF PS"
        self.debug_stream("In always_excuted_hook()")
        #----- PROTECTED REGION ID(DummyIonPump.always_executed_hook) ENABLED START -----#
        self.attr_Current_read = self.dummy.getCurrent()
        self.attr_Voltage_read = self.dummy.getVoltage()

        if not self.get_state() == PyTango.DevState.OFF:
            if self.dummy.getMoving() == True:
                self.set_state(PyTango.DevState.MOVING)
            else:
                self.set_state(PyTango.DevState.ON)
        #----- PROTECTED REGION END -----#	//	DummyIonPump.always_executed_hook

    #-----------------------------------------------------------------------------
    #    DummyIonPump read/write attribute methods
    #-----------------------------------------------------------------------------
    
    def read_Mode(self, attr):
        attr.set_value(self.Mode)
    def write_Mode(self, attr):
        self.Mode = attr.get_write_value()

    def read_ilock1(self, attr):
        attr.set_value(self.ilock1)
    def write_ilock1(self, attr):
        self.ilock1 = attr.get_write_value()

    def read_ilock2(self, attr):
        attr.set_value(self.ilock2)
    def write_ilock2(self, attr):
        self.ilock2 = attr.get_write_value()


    def read_Trigger(self, attr):
        attr.set_value(self.trigger)


    def read_Current(self, attr):
        print "+++++++++++++++ IN READ I OF PS"
        self.debug_stream("In read_Current()")

        #self.attr_Current_read = self.dummy.getCurrent()
        attr.set_value(self.attr_Current_read)


    def write_Current(self, attr):
        self.debug_stream("In write_Current()")
        data = attr.get_write_value()

        
        self.dummy.setCurrent(data)


    def read_Voltage(self, attr):
        self.debug_stream("In read_Voltage()")

        #self.attr_Current_read = self.dummy.getCurrent()
        attr.set_value(self.attr_Voltage_read)

    def write_Voltage(self, attr):
        self.debug_stream("In write_Voltage()")
        data = attr.get_write_value()
        self.dummy.setVoltage(data)

    def read_AnArray(self, attr):
        attr.set_value(self.anarray)

    def write_AnArray(self, attr):
        self.anarray = attr.get_write_value()
  
    def read_Enable(self, attr):
        attr.set_value(self.enable)

    def write_Enable(self, attr):
        self.enable = attr.get_write_value()

    def read_attr_hardware(self, data):
        self.debug_stream("In read_attr_hardware()")
        #----- PROTECTED REGION ID(DummyIonPump.read_attr_hardware) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	DummyIonPump.read_attr_hardware


    #-----------------------------------------------------------------------------
    #    DummyIonPump command methods
    #-----------------------------------------------------------------------------
    def On(self): 
        self.set_state(PyTango.DevState.ON)


    def Off(self): 
        self.set_state(PyTango.DevState.OFF)
        
    def Trig(self):

        print "push event"
        self.trigger = self.trigger + 1
        self.push_change_event('Trigger', self.trigger)



class DummyPSClass(PyTango.DeviceClass):
    #--------- Add you global class variables here --------------------------
    #----- PROTECTED REGION ID(DummyIonPump.global_class_variables) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	DummyIonPump.global_class_variables


        #----- PROTECTED REGION ID(DummyIonPump.dyn_attr) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	DummyIonPump.dyn_attr

    #    Class Properties
    class_property_list = {
        }


    #    Device Properties
    device_property_list = {
        }


    #    Command definitions
    cmd_list = {
        'On':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevBoolean, "none"]],
        'Off':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevBoolean, "none"]],
        'Trig':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevBoolean, "none"]],

        }


    #    Attribute definitions
    attr_list = {
        'Current':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE]],
        'Trigger':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ]],
        'Voltage':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE]],
        'Enable':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
              PyTango.READ_WRITE]],
        'Mode':
            [[PyTango.DevString,
            PyTango.SCALAR,
              PyTango.READ_WRITE]],
        'ilock1':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
              PyTango.READ_WRITE]],
        'ilock2':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
              PyTango.READ_WRITE]],
        'AnArray':
            [[PyTango.DevDouble, 
            PyTango.SPECTRUM,
              PyTango.READ_WRITE, 10]],
        }


def main():
    try:
        py = PyTango.Util(sys.argv)
        py.add_class(DummyPSClass,DummyPS,'DummyPS')

        U = PyTango.Util.instance()
        U.server_init()
        U.server_run()

    except PyTango.DevFailed,e:
        print '-------> Received a DevFailed exception:',e
    except Exception,e:
        print '-------> An unforeseen exception occured....',e

if __name__ == '__main__':
    main()
